import { GoogleGenerativeAI } from '@google/generative-ai';
import { config } from './config.js';

const client = new GoogleGenerativeAI(config.geminiApiKey);

export async function runChecklist(transcript, logger) {
  const model = client.getGenerativeModel({ model: 'gemini-1.5-flash' });
  
  const prompt = `
Ты - эксперт по продажам и переговорам. Проанализируй транскрипцию встречи и выдай структурированный отчет по 12 пунктам чек-листа.

ЧЕК-ЛИСТ АНАЛИЗА ВСТРЕЧИ:

1. АНАЛИЗ ТЕКУЩЕГО БИЗНЕСА КЛИЕНТА
- Задачи бизнеса клиента
- Текущие методы привлечения клиентов
- Уровень удовлетворенности (1-10)
- Целевая аудитория и источники трафика
- Наличие спроса/потребности
- Средний чек и отдел продаж
- Глубина проработки вопросов менеджером

2. ВЫЯВЛЕНИЕ БОЛЕЙ И ПОТРЕБНОСТЕЙ
- Конкретные проблемы привлечения клиентов
- Упущенная прибыль из-за недостатка лидов
- Качество текущих лидов
- Методы выявления болей
- Озвученные боли, мотивации, опасения
- Степень закрытия потребностей (0-100%)

3. ВОЗРАЖЕНИЯ ПО ЛИДОГЕНЕРАЦИИ
- Типы возражений ("Дорого", "Не нужно" и т.д.)
- Методы отработки возражений
- Эффективность отработки
- Альтернативные варианты

4. РЕАКЦИЯ НА МОДЕЛЬ ГЕНЕРАЦИИ ЦЕЛЕВЫХ КЛИЕНТОВ
- Что клиент оценил в подходе
- Понимание ценности голосового подтверждения

5. ОСОБЫЙ ИНТЕРЕС К СЕРВИСУ
- Конкретные аспекты интереса
- Что больше всего зацепило клиента

6. НАЙДЕННЫЕ ВОЗМОЖНОСТИ
- Увеличение конверсии
- Экономия времени/ресурсов
- Рост выручки
- Возможность расширения

7. ОШИБКИ МЕНЕДЖЕРА
- Конкретные промахи с примерами

8. ПУТЬ К ЗАКРЫТИЮ
- Финансовый расчет CPL, ROI
- План дальнейшей коммуникации
- Дедлайн для решения
- Призыв к действию
- Выявление причин отказа
- Ускорение договоренности

9. ТОН БЕСЕДЫ
- Общая атмосфера встречи

10. КОНТРОЛЬ ДИАЛОГА
- Доминирование в разговоре
- Кто задавал вопросы

11. РЕКОМЕНДАЦИИ
- Конкретные советы для улучшения

12. КАТЕГОРИЯ КЛИЕНТА
- А (горячий), В (теплый), С (холодный) с обоснованием

ФОРМАТ ОТВЕТА (строго JSON):
{
  "overallScore": 85,
  "points": {
    "1": {"score": 8, "comment": "Анализ выполнен хорошо..."},
    "2": {"score": 7, "comment": "Выявление болей..."},
    // ... все 12 пунктов
  },
  "summary": "Краткое резюме встречи",
  "category": "B"
}

ТРАНСКРИПТ ВСТРЕЧИ:
${transcript}
  `.trim();

  try {
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    // Извлекаем JSON из ответа
    const jsonStart = text.indexOf('{');
    const jsonEnd = text.lastIndexOf('}');
    
    if (jsonStart >= 0 && jsonEnd > jsonStart) {
      const jsonString = text.substring(jsonStart, jsonEnd + 1);
      return JSON.parse(jsonString);
    } else {
      logger.warn({ text }, 'JSON not found in Gemini response');
      return { 
        overallScore: 75, 
        points: {},
        summary: "Не удалось проанализировать встречу",
        category: "B"
      };
    }
  } catch (e) {
    logger.error({ err: e }, 'Gemini analysis failed');
    return { 
      error: e.message,
      overallScore: 70, 
      points: {},
      summary: "Ошибка анализа встречи",
      category: "C"
    };
  }
}